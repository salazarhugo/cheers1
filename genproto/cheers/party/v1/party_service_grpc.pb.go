// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: cheers/party/v1/party_service.proto

package party

import (
	context "context"
	party "github.com/salazarhugo/cheers1/genproto/cheers/type/party"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartyServiceClient is the client API for PartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyServiceClient interface {
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*party.Party, error)
	ListParty(ctx context.Context, in *ListPartyRequest, opts ...grpc.CallOption) (*ListPartyResponse, error)
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*party.Party, error)
	DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type partyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyServiceClient(cc grpc.ClientConnInterface) PartyServiceClient {
	return &partyServiceClient{cc}
}

func (c *partyServiceClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*party.Party, error) {
	out := new(party.Party)
	err := c.cc.Invoke(ctx, "/cheers.party.v1.PartyService/CreateParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) ListParty(ctx context.Context, in *ListPartyRequest, opts ...grpc.CallOption) (*ListPartyResponse, error) {
	out := new(ListPartyResponse)
	err := c.cc.Invoke(ctx, "/cheers.party.v1.PartyService/ListParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*party.Party, error) {
	out := new(party.Party)
	err := c.cc.Invoke(ctx, "/cheers.party.v1.PartyService/UpdateParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyServiceClient) DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cheers.party.v1.PartyService/DeleteParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyServiceServer is the server API for PartyService service.
// All implementations must embed UnimplementedPartyServiceServer
// for forward compatibility
type PartyServiceServer interface {
	CreateParty(context.Context, *CreatePartyRequest) (*party.Party, error)
	ListParty(context.Context, *ListPartyRequest) (*ListPartyResponse, error)
	UpdateParty(context.Context, *UpdatePartyRequest) (*party.Party, error)
	DeleteParty(context.Context, *DeletePartyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPartyServiceServer()
}

// UnimplementedPartyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartyServiceServer struct {
}

func (UnimplementedPartyServiceServer) CreateParty(context.Context, *CreatePartyRequest) (*party.Party, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (UnimplementedPartyServiceServer) ListParty(context.Context, *ListPartyRequest) (*ListPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParty not implemented")
}
func (UnimplementedPartyServiceServer) UpdateParty(context.Context, *UpdatePartyRequest) (*party.Party, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParty not implemented")
}
func (UnimplementedPartyServiceServer) DeleteParty(context.Context, *DeletePartyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParty not implemented")
}
func (UnimplementedPartyServiceServer) mustEmbedUnimplementedPartyServiceServer() {}

// UnsafePartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyServiceServer will
// result in compilation errors.
type UnsafePartyServiceServer interface {
	mustEmbedUnimplementedPartyServiceServer()
}

func RegisterPartyServiceServer(s grpc.ServiceRegistrar, srv PartyServiceServer) {
	s.RegisterService(&PartyService_ServiceDesc, srv)
}

func _PartyService_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.party.v1.PartyService/CreateParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_ListParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).ListParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.party.v1.PartyService/ListParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).ListParty(ctx, req.(*ListPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.party.v1.PartyService/UpdateParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyService_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServiceServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.party.v1.PartyService/DeleteParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServiceServer).DeleteParty(ctx, req.(*DeletePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyService_ServiceDesc is the grpc.ServiceDesc for PartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cheers.party.v1.PartyService",
	HandlerType: (*PartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateParty",
			Handler:    _PartyService_CreateParty_Handler,
		},
		{
			MethodName: "ListParty",
			Handler:    _PartyService_ListParty_Handler,
		},
		{
			MethodName: "UpdateParty",
			Handler:    _PartyService_UpdateParty_Handler,
		},
		{
			MethodName: "DeleteParty",
			Handler:    _PartyService_DeleteParty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cheers/party/v1/party_service.proto",
}
