// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cheers/drink/v1/drink_service.proto

package drink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrinkServiceClient is the client API for DrinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrinkServiceClient interface {
	CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*CreateDrinkResponse, error)
	GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error)
	UpdateDrink(ctx context.Context, in *UpdateDrinkRequest, opts ...grpc.CallOption) (*UpdateDrinkResponse, error)
	ListDrink(ctx context.Context, in *ListDrinkRequest, opts ...grpc.CallOption) (*ListDrinkResponse, error)
	DeleteDrink(ctx context.Context, in *DeleteDrinkRequest, opts ...grpc.CallOption) (*DeleteDrinkResponse, error)
}

type drinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDrinkServiceClient(cc grpc.ClientConnInterface) DrinkServiceClient {
	return &drinkServiceClient{cc}
}

func (c *drinkServiceClient) CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*CreateDrinkResponse, error) {
	out := new(CreateDrinkResponse)
	err := c.cc.Invoke(ctx, "/cheers.drink.v1.DrinkService/CreateDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkServiceClient) GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error) {
	out := new(GetDrinkResponse)
	err := c.cc.Invoke(ctx, "/cheers.drink.v1.DrinkService/GetDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkServiceClient) UpdateDrink(ctx context.Context, in *UpdateDrinkRequest, opts ...grpc.CallOption) (*UpdateDrinkResponse, error) {
	out := new(UpdateDrinkResponse)
	err := c.cc.Invoke(ctx, "/cheers.drink.v1.DrinkService/UpdateDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkServiceClient) ListDrink(ctx context.Context, in *ListDrinkRequest, opts ...grpc.CallOption) (*ListDrinkResponse, error) {
	out := new(ListDrinkResponse)
	err := c.cc.Invoke(ctx, "/cheers.drink.v1.DrinkService/ListDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkServiceClient) DeleteDrink(ctx context.Context, in *DeleteDrinkRequest, opts ...grpc.CallOption) (*DeleteDrinkResponse, error) {
	out := new(DeleteDrinkResponse)
	err := c.cc.Invoke(ctx, "/cheers.drink.v1.DrinkService/DeleteDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrinkServiceServer is the server API for DrinkService service.
// All implementations must embed UnimplementedDrinkServiceServer
// for forward compatibility
type DrinkServiceServer interface {
	CreateDrink(context.Context, *CreateDrinkRequest) (*CreateDrinkResponse, error)
	GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error)
	UpdateDrink(context.Context, *UpdateDrinkRequest) (*UpdateDrinkResponse, error)
	ListDrink(context.Context, *ListDrinkRequest) (*ListDrinkResponse, error)
	DeleteDrink(context.Context, *DeleteDrinkRequest) (*DeleteDrinkResponse, error)
	mustEmbedUnimplementedDrinkServiceServer()
}

// UnimplementedDrinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDrinkServiceServer struct {
}

func (UnimplementedDrinkServiceServer) CreateDrink(context.Context, *CreateDrinkRequest) (*CreateDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrink not implemented")
}
func (UnimplementedDrinkServiceServer) GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrink not implemented")
}
func (UnimplementedDrinkServiceServer) UpdateDrink(context.Context, *UpdateDrinkRequest) (*UpdateDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrink not implemented")
}
func (UnimplementedDrinkServiceServer) ListDrink(context.Context, *ListDrinkRequest) (*ListDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrink not implemented")
}
func (UnimplementedDrinkServiceServer) DeleteDrink(context.Context, *DeleteDrinkRequest) (*DeleteDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrink not implemented")
}
func (UnimplementedDrinkServiceServer) mustEmbedUnimplementedDrinkServiceServer() {}

// UnsafeDrinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrinkServiceServer will
// result in compilation errors.
type UnsafeDrinkServiceServer interface {
	mustEmbedUnimplementedDrinkServiceServer()
}

func RegisterDrinkServiceServer(s grpc.ServiceRegistrar, srv DrinkServiceServer) {
	s.RegisterService(&DrinkService_ServiceDesc, srv)
}

func _DrinkService_CreateDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkServiceServer).CreateDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.drink.v1.DrinkService/CreateDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkServiceServer).CreateDrink(ctx, req.(*CreateDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrinkService_GetDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkServiceServer).GetDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.drink.v1.DrinkService/GetDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkServiceServer).GetDrink(ctx, req.(*GetDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrinkService_UpdateDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkServiceServer).UpdateDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.drink.v1.DrinkService/UpdateDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkServiceServer).UpdateDrink(ctx, req.(*UpdateDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrinkService_ListDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkServiceServer).ListDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.drink.v1.DrinkService/ListDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkServiceServer).ListDrink(ctx, req.(*ListDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrinkService_DeleteDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkServiceServer).DeleteDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheers.drink.v1.DrinkService/DeleteDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkServiceServer).DeleteDrink(ctx, req.(*DeleteDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrinkService_ServiceDesc is the grpc.ServiceDesc for DrinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cheers.drink.v1.DrinkService",
	HandlerType: (*DrinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrink",
			Handler:    _DrinkService_CreateDrink_Handler,
		},
		{
			MethodName: "GetDrink",
			Handler:    _DrinkService_GetDrink_Handler,
		},
		{
			MethodName: "UpdateDrink",
			Handler:    _DrinkService_UpdateDrink_Handler,
		},
		{
			MethodName: "ListDrink",
			Handler:    _DrinkService_ListDrink_Handler,
		},
		{
			MethodName: "DeleteDrink",
			Handler:    _DrinkService_DeleteDrink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cheers/drink/v1/drink_service.proto",
}
